module maija::maija;

extern printf;
extern rand;
expect @Function<@Integer> rand;
extern srand;
expect @Function<@Void, @Time> srand;
extern time;
expect @Function<@Time, @Null> time;

/* Vaihda satunnaislukugeneraattorin siemen */
@Void randomize [
	srand(time(null));
]

/* Arvo satunnaisluku */
@Integer rnd(@Integer alue) [
	return rand() % alue;
]

/* ANSI-värikoodi tulostukseen */
@String varikoodi(@String id) [
	return "".appendch(0x1B)+"["+id+"m";
]

/* Tulosta tekstiä huomioväreillä */
@Void huomio(@String teksti) [
	teksti = varikoodi("34;1") + "===== " + teksti + varikoodi("0");
	printf("%s\n", teksti);
]

/* Tulosta "laiton siirto" -teksti c*/
@Boolean laiton(@String viesti) [
	printf("Laiton siirto: %s\n", viesti);
	return true;
]

@Void tulostaKasi(@Kortti[] kasi, @Closure<@Boolean, @Kortti> num) [
	var rivi = "";
	var rivi1 = "";
	var rivi2 = "";
	var rivi3 = "";
	var rivi4 = "";
	var rivi5 = "";
	kasi iterate # (i, k) [
		if (num(k)) rivi = rivi + " " + i::inc + " ";
		else rivi = rivi + "   ";
		rivi1 = rivi1 + "╭──";
		rivi2 = rivi2 + "│" + k::vari + k::maa::lyh + varikoodi("0") + " ";
		if (k::koko == 10)
			rivi3 = rivi3 + "│" + k::vari + "10" + varikoodi("0");
		else	rivi3 = rivi3 + "│" + k::vari + k::kokolyh + varikoodi("0") + " ";
		rivi4 = rivi4 + "│  ";
		rivi5 = rivi5 + "╰──";
	];
	
	printf("%s\n", rivi);
	printf("%s──╮\n", rivi1);
	printf("%s  │\n", rivi2);
	printf("%s  │\n", rivi3);
	printf("%s  │\n", rivi4);
	printf("%s──╯\n", rivi5);
]

/* Maa

Kortin maa = Kortin ID mod 4
0 = Hertta 1
1 = Ruutu 1
2 = Risti 1
3 = Pata 1
4 = Hertta 2
5 = Ruutu 2
jne...

*/
interface @Maa data @Integer {
	@Kortti operator * (@Integer koko) [
		return @Kortti (koko-1)*4 + @Integer this;
	]

	auto @String [
		if (HERTTA() == this) return "Hertta";
		if (RUUTU() == this) return "Ruutu";
		if (RISTI() == this) return "Risti";
		if (PATA() == this) return "Pata";
		return "Jokeri " + @Integer this;
	]
	
	@String lyh [
		if (HERTTA() == this) return "♥";
		if (RUUTU() == this) return "♦";
		if (RISTI() == this) return "♣";
		if (PATA() == this) return "♠";
		return "Jokeri " + @Integer this;
	]
	
	@Boolean operator == (@Maa k) [
		return (@Integer this) % 4 == (@Integer k) % 4;
	]
	@Boolean operator != (@Maa k) [
		return (@Integer this) % 4 != (@Integer k) % 4;
	]
};

/* Maat */
@Maa HERTTA [ return @Maa 0; ]
@Maa RUUTU [ return @Maa 1; ]
@Maa RISTI [ return @Maa 2; ]
@Maa PATA [ return @Maa 3; ]

/* Pelikortti

Maa = ID mod 4
Numero = ID / 4

*/
interface @Kortti data @Integer {
	@Maa maa [
		return @Maa (@Integer this) % 4;
	]
	@Integer koko [
		var a = (@Integer this) / 4 % 13 + 1;
		if (a == 1) return 14;
		return a;
	]
	
	@String vari [
		/* Väritä kortti maan mukaan */
		if (this::maa == HERTTA() || this::maa == RUUTU())
			return "" + varikoodi("31;1");
		if (this::maa == PATA() || this::maa == RISTI())
			return "" + varikoodi("1");
			
		/* Tuntematon maa - palauta värittämättömänä */
		return "";
	]
	
	/* Tekstinä */
	auto @String [
		return "" + this::vari + this::maa + " " + this::koko + varikoodi("0");
	]
	
	@String kokolyh [
		var a = (@Integer this) / 4 % 13 + 1;
		if (a == 1) return "A";
		if (a == 13) return "K";
		if (a == 12) return "Q";
		if (a == 11) return "J";
		return ""+a;
	]
	
	/* Korttien vertailuun */
	@Boolean operator == (@Kortti k) [
		return (@Integer this) == @Integer k;
	]
	@Boolean operator != (@Kortti k) [
		return (this == k)::not;
	]
	
	/* Korttien järjestämiseen */
	@Boolean operator < (@Kortti k) [
		if (this::maa == k::maa) return this::koko < k::koko;
		else return (@Integer this) % 4 < (@Integer k) % 4;
	]
};
